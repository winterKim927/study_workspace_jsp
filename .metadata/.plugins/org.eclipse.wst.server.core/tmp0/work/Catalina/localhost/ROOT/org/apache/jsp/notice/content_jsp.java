/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-10 11:20:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.notice;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import notice.domain.Notice;
import notice.repository.NoticeDAO;

public final class content_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 NoticeDAO dao = new NoticeDAO(); 
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("notice.domain.Notice");
    _jspx_imports_classes.add("notice.repository.NoticeDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	int notice_idx = Integer.parseInt(request.getParameter("notice_idx"));
	Notice dto = dao.select(notice_idx);
	dao.updateHit(notice_idx);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("	<style>\r\n");
      out.write("	body {\r\n");
      out.write("		font-family: Arial, Helvetica, sans-serif;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	* {\r\n");
      out.write("		box-sizing: border-box;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	input[type=text], select, textarea {\r\n");
      out.write("		width: 100%;\r\n");
      out.write("		padding: 12px;\r\n");
      out.write("		border: 1px solid #ccc;\r\n");
      out.write("		border-radius: 4px;\r\n");
      out.write("		box-sizing: border-box;\r\n");
      out.write("		margin-top: 6px;\r\n");
      out.write("		margin-bottom: 16px;\r\n");
      out.write("		resize: vertical;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	button {\r\n");
      out.write("		background-color: #04AA6D;\r\n");
      out.write("		color: white;\r\n");
      out.write("		padding: 12px 20px;\r\n");
      out.write("		border: none;\r\n");
      out.write("		border-radius: 4px;\r\n");
      out.write("		cursor: pointer;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	button:hover {\r\n");
      out.write("		background-color: #45a049;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.container {\r\n");
      out.write("		border-radius: 5px;\r\n");
      out.write("		background-color: #f2f2f2;\r\n");
      out.write("		padding: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	</style>\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function() {\r\n");
      out.write("			$(update).click(function() {\r\n");
      out.write("				if(confirm(\"수정하시겠습니까?\")){\r\n");
      out.write("					$(\"form\").attr(\"action\", \"/notice/update\");\r\n");
      out.write("					$(\"form\").submit();\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$(del).click(function() {\r\n");
      out.write("				if(confirm(\"삭제하시겠습니까?\")){\r\n");
      out.write("					$(\"form\").attr(\"action\", \"/notice/del\");\r\n");
      out.write("					$(\"form\").submit();\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			$(list).click(function() {\r\n");
      out.write("				location.href=\"/notice/list.jsp\";				\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h3>글 수정 페이지</h3>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<form method=\"post\">\r\n");
      out.write("			<input type=\"hidden\" name=\"notice_idx\" value=\"");
      out.print(notice_idx);
      out.write("\">\r\n");
      out.write("		\r\n");
      out.write("			<label for=\"title\">제목</label> \r\n");
      out.write("			<input type=\"text\" name=\"title\" value=\"");
      out.print(dto.getTitle());
      out.write("\">\r\n");
      out.write("			 \r\n");
      out.write("			<label for=\"writer\">작성자</label> \r\n");
      out.write("			<input type=\"text\" name=\"writer\" value=\"");
      out.print(dto.getWriter());
      out.write("\" readonly> \r\n");
      out.write("			\r\n");
      out.write("			<label for=\"content\">내용</label>\r\n");
      out.write("			<textarea name=\"content\" style=\"height: 200px\">");
      out.print(dto.getContent());
      out.write("</textarea>\r\n");
      out.write("			\r\n");
      out.write("		</form>\r\n");
      out.write("		<button id=\"update\">수정</button>\r\n");
      out.write("		<button id=\"del\">삭제</button>\r\n");
      out.write("		<button id=\"list\">목록</button>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
